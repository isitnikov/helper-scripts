#!/usr/bin/env bash

convertsecs() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%02d:%02d:%02d\n" $h $m $s
}

getSourceDirOfScript () {
  local SOURCE=${BASH_SOURCE[0]}
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  local SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

  echo $SCRIPT_DIR
}


make_phpstorm_dir () {
  mkdir .idea
  UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  SSH_UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')

  cat  << EOF > .idea/dataSources.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
    <data-source source="LOCAL" name="magento@${PROJECT_NAME}_db_1" uuid="${UUID}">
      <driver-ref>mariadb</driver-ref>
      <synchronize>true</synchronize>
      <user-name>magento</user-name>
      <jdbc-driver>org.mariadb.jdbc.Driver</jdbc-driver>
      <jdbc-url>jdbc:mariadb://${PROJECT_NAME}_db_1:3306/magento</jdbc-url>
      <working-dir>\$ProjectFileDir\$</working-dir>
      <ssh-properties>
              <enabled>true</enabled>
              <ssh-config-id>${SSH_UUID}</ssh-config-id>
            </ssh-properties>
    </data-source>
  </component>
</project>
EOF

  cat  << EOF > .idea/sshConfigs.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="SshConfigs">
    <configs>
      <sshConfig authType="OPEN_SSH" host="tunnel.warden.test" id="${SSH_UUID}" port="2222" nameFormat="DESCRIPTIVE" username="user" useOpenSSHConfig="true" />
    </configs>
  </component>
</project>
EOF

  cat  << EOF > .idea/${PROJECT_NAME}.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://\$MODULE_DIR\$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
EOF


  cat  << EOF > .idea/modules.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://\$PROJECT_DIR\$/.idea/${PROJECT_NAME}.iml" filepath="\$PROJECT_DIR\$/.idea/${PROJECT_NAME}.iml" />
    </modules>
  </component>
</project>
EOF

  UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  cat  << EOF > .idea/workspace.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PhpServers">
      <servers>
        <server host="${PROJECT_NAME}-docker" id="${UUID}" name="${PROJECT_NAME}-docker" use_path_mappings="true">
          <path_mappings>
            <mapping local-root="\$PROJECT_DIR\$" remote-root="/var/www/html" />
          </path_mappings>
        </server>
      </servers>
    </component>
</project>
EOF
  echo "PHPSTORM dir created successfully..."

}

varden_init_env () {
  warden env-init ${PROJECT_NAME} magento2
  warden sign-certificate ${PROJECT_NAME}.test
}

init_project () {
  make_phpstorm_dir
  varden_init_env
  cp ${SCRIPT_DIR}/replace-scripts.php ./

  local PHP_VERSION=${1}
  if [ -n "$CLOUD_PROJECT_ID" ]
  then
    if [[ "${PHP_VERSION}" != *"7.4"* ]]
      then
          sed -i '' 's/PHP_VERSION=7.4/PHP_VERSION=7.3/g' .env
      fi
  fi
}

START_TIME_OF_EXECUTION=`date +%s`

SCRIPT_DIR=$(getSourceDirOfScript)



if [ -z "$1" ]
then
      read -p 'Enter JIRA ticket number (empty for using current folder): ' PROJECT_NAME
else
  PROJECT_NAME=$1

  echo "Project name is: ${PROJECT_NAME}"
fi

if [ -z "$2" ]
then
      read -p 'Enter cloud project ID: ' CLOUD_PROJECT_ID
else
  CLOUD_PROJECT_ID=$2

  echo "Cloud project ID  is: ${CLOUD_PROJECT_ID}"
fi



if [ -n "$CLOUD_PROJECT_ID" ]
then
  if [ -z "$3" ]
  then
        magento-cloud env:list -p ${CLOUD_PROJECT_ID} -I --format plain --pipe
        read -p 'Enter environment ID: ' CLOUD_ENV_ID
  else
    CLOUD_ENV_ID=$3

    echo "Cloud environment ID  is: ${CLOUD_ENV_ID}"
  fi
fi



PROJECT_NAME="${PROJECT_NAME//-/}"
PROJECT_NAME=$(echo "$PROJECT_NAME" |  tr '[:upper:]' '[:lower:]' )

if [ -z "${PROJECT_NAME}" ]
then
  PROJECT_NAME=$(basename "$(pwd)")
else
  mkdir ${PROJECT_NAME}
  cd $_
fi

echo "Project name is ${PROJECT_NAME}"

if [ -z "$CLOUD_PROJECT_ID" ]
then
      echo "project id not specified"
      PHP_VERSION=""
else
      SSH_HOST=`eval magento-cloud environment:ssh --all --project $CLOUD_PROJECT_ID -e $CLOUD_ENV_ID --pipe`
      SSH_HOST=$(echo "$SSH_HOST" | head -1)
      echo "SSH Host is: ${SSH_HOST}"


      PHP_VERSION=$(magento-cloud app:list -p $CLOUD_PROJECT_ID -e $CLOUD_ENV_ID --columns Type --format plain --no-header)
      echo "Detected php version is ${PHP_VERSION}"
fi


# output only after full result
echo "$(init_project ${PHP_VERSION})" &


if [ -n "$CLOUD_PROJECT_ID" ]
then
      cloud-teleport ${SSH_HOST} dump
fi

CODE_FILE="$(ls  php*.code.tar.gz | sort -V | tail -n1)"
DATABASE_FILE="$(ls  php*.database.sql.gz | sort -V | tail -n1)"

wait

unpack_code () {
  if [ -n "${CODE_FILE}" ]
  then
    echo "Unpacking code..."
    tar -xzf ${CODE_FILE}
  fi
}

# output only after full result
echo  "$(unpack_code)" &

# mutagen sync can not be on time so we need fully unpack before up env
# TODO
wait
warden env up


if [ -n "${DATABASE_FILE}" ]
then
  echo "Importing db dump..."
  gunzip -c ${DATABASE_FILE} | warden db import
fi


wait

# Replacing env.php and db configs

echo "configuring composer"
warden env exec -T php-fpm composer config --no-plugins allow-plugins.laminas/laminas-dependency-plugin true
warden env exec -T php-fpm composer config --no-plugins allow-plugins.magento/magento-composer-installer true
warden env exec -T php-fpm composer config --no-plugins allow-plugins.magento/inventory-composer-installer true
warden env exec -T php-fpm composer config --no-plugins allow-plugins.magento/composer-root-update-plugin true

echo "Run dump autoload"
warden env exec -T php-fpm composer dump-autoload

warden env exec -T php-fpm php replace-scripts.php env
warden env exec -T php-fpm php replace-scripts.php conf

REPLACE_SCRIPTS_COMMAND=$(warden env exec -T php-fpm php replace-scripts.php db)
echo "${REPLACE_SCRIPTS_COMMAND}"
HOSTS_COMMAND=$(echo "${REPLACE_SCRIPTS_COMMAND}" | grep HOSTS_COMMAND | sed -u "s/HOSTS_COMMAND=//g")



warden env exec -T php-fpm php bin/magento deploy:mode:set developer
warden env exec -T php-fpm php bin/magento a:c:i
warden env exec -T php-fpm php bin/magento ca:f
warden env exec -T php-fpm php bin/magento admin:user:create --admin-user admin --admin-password 123123q --admin-email admin@example.com --admin-firstname admf --admin-lastname adml
warden env exec -T php-fpm php bin/magento mo:di Magento_TwoFactorAuth



END_TIME_OF_EXECUTION=`date +%s`
TOTAL_TIME_OF_EXECUTION=$((END_TIME_OF_EXECUTION-START_TIME_OF_EXECUTION))
echo TOTAL time of execution is: $(convertsecs TOTAL_TIME_OF_EXECUTION)


echo "https://app.${PROJECT_NAME}.test/"
echo "cd ${PROJECT_NAME}"
eval $HOSTS_COMMAND