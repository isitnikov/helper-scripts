#!/usr/bin/env bash

# In case of Traefik errors, try solution https://github.com/docker/for-mac/issues/6677#issuecomment-1382313815

valid_versions=("7.2" "7.3" "7.4" "8.1" "8.2" "8.3")
trap "exit" INT

function is_valid_version() {
  local version=$1
  for v in "${valid_versions[@]}"; do
    if [[ "$v" == "$version" ]]; then
      return 0
    fi
  done
  return 1
}

convertsecs() {
 ((h=${1}/3600))
 ((m=(${1}%3600)/60))
 ((s=${1}%60))
 printf "%02d:%02d:%02d\n" $h $m $s
}

spin() {
  local pid=$1
  local message=$2
  local delay=0.1
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [  %c  ] %s\r" "$spinstr" "$message"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
  done
  printf "    \b\b\b\b[ Done ]"
  echo ""
}

# (your_command_here) & pid=$!

getSourceDirOfScript () {
  local SOURCE=${BASH_SOURCE[0]}
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
    SOURCE=$(readlink "$SOURCE")
    [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  local SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

  echo $SCRIPT_DIR
}


make_phpstorm_dir () {
  mkdir .idea
  UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  SSH_UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')

  PROD_UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  PROD_SSH_UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')


  local host=$(echo "${DATABASE_CONNECTION_DATA}" | grep host | sed -u "s/host: //g")
  local port=$(echo "${DATABASE_CONNECTION_DATA}" | grep port | sed -u "s/port: //g"| sed -u "s/'//g")
  PROD_DB_USERNAME=$(echo "${DATABASE_CONNECTION_DATA}" | grep username | sed -u "s/username: //g")
  local password=$(echo "${DATABASE_CONNECTION_DATA}" | grep password | sed -u "s/password: //g")

  echo -e "ssh: ${SSH_HOST}\nhost: ${host}\nport: ${port}\nusername: ${PROD_DB_USERNAME}\npassword: ${password}\n" > production_db_access_data.txt
  echo -e "ssh: user@tunnel.warden.test:2222\nhost: ${PROJECT_NAME}-db-1\nport: 3306\nusername: magento\npassword: magento\n" > local_db_access_data.txt

  cat  << EOF > .idea/dataSources.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
    <data-source source="LOCAL" name="LOCAL_magento@${PROJECT_NAME}_db_1" uuid="${UUID}">
      <driver-ref>mariadb</driver-ref>
      <synchronize>true</synchronize>
      <user-name>magento</user-name>
      <jdbc-driver>org.mariadb.jdbc.Driver</jdbc-driver>
      <jdbc-url>jdbc:mariadb://${PROJECT_NAME}-db-1:3306/magento</jdbc-url>
      <working-dir>\$ProjectFileDir\$</working-dir>
      <ssh-properties>
              <enabled>true</enabled>
              <ssh-config-id>${SSH_UUID}</ssh-config-id>
            </ssh-properties>
    </data-source>
    <data-source source="LOCAL" name="PRODUCTION_magento@${PROJECT_NAME}" uuid="${PROD_UUID}">
          <driver-ref>mariadb</driver-ref>
          <synchronize>true</synchronize>
          <user-name>${PROD_DB_USERNAME}</user-name>
          <jdbc-driver>org.mariadb.jdbc.Driver</jdbc-driver>
          <jdbc-url>jdbc:mariadb://${host}:${port}/magento</jdbc-url>
          <working-dir>\$ProjectFileDir\$</working-dir>
          <ssh-properties>
                  <enabled>true</enabled>
                  <ssh-config-id>${PROD_SSH_UUID}</ssh-config-id>
                </ssh-properties>
        </data-source>
  </component>
</project>
EOF

  cat  << EOF > .idea/sshConfigs.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="SshConfigs">
    <configs>
      <sshConfig authType="OPEN_SSH" host="tunnel.warden.test" id="${SSH_UUID}" port="2222" nameFormat="DESCRIPTIVE" username="user" useOpenSSHConfig="true" />
      <sshConfig authType="OPEN_SSH" host="${SSH_HOST}" id="${PROD_SSH_UUID}" port="22" nameFormat="DESCRIPTIVE" username="user" useOpenSSHConfig="true" />
    </configs>
  </component>
</project>
EOF

  cat  << EOF > .idea/${PROJECT_NAME}.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://\$MODULE_DIR\$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
EOF


  cat  << EOF > .idea/modules.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://\$PROJECT_DIR\$/.idea/${PROJECT_NAME}.iml" filepath="\$PROJECT_DIR\$/.idea/${PROJECT_NAME}.iml" />
    </modules>
  </component>
</project>
EOF

  UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
  cat  << EOF > .idea/workspace.xml
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PhpServers">
      <servers>
        <server host="${PROJECT_NAME}-docker" id="${UUID}" name="${PROJECT_NAME}-docker" use_path_mappings="true">
          <path_mappings>
            <mapping local-root="\$PROJECT_DIR\$" remote-root="/var/www/html" />
          </path_mappings>
        </server>
      </servers>
    </component>
</project>
EOF
  echo "PHPSTORM dir created successfully..."

}

varden_init_env () {
  warden env-init ${PROJECT_NAME} magento2
  (warden sign-certificate ${PROJECT_NAME}.test > /dev/null 2>&1) & pid=$!
  # (warden sign-certificate ${PROJECT_NAME}.test >> install.${START_TIME_OF_EXECUTION}.log 2>&1) & pid=$!
  spin $pid "Signing certificate..."
}

init_project () {
  mkdir source
  cd source
  make_phpstorm_dir
  varden_init_env
  cp -R ${SCRIPT_DIR}/warden_deploy_scripts ./warden_deploy_scripts
  cp -R ${SCRIPT_DIR}/.warden ./.warden

  local PHP_VERSION=${1}

  case "${PHP_VERSION}" in
    *"7.2"*|*"72"*)
      new_version="7.2"
      ;;
    *"7.3"*|*"73"*)
      new_version="7.3"
      ;;
    *"7.4"*|*"74"*)
      new_version="7.4"
      ;;
    *"8.1"*|*"81"*)
      new_version="8.1"
      ;;
    *"8.2"*|*"82"*)
      new_version="8.2"
      ;;
    *"8.3"*|*"83"*)
      new_version="8.3"
      ;;
    *)
      echo "Unknown PHP version."
      exit 1
      ;;
  esac

  sed -i '' "s/PHP_VERSION=[0-9]\{1,\}\.[0-9]\{1,\}/PHP_VERSION=${new_version}/g" .env

  cd ../
}

START_TIME_OF_EXECUTION=`date +%s`

SCRIPT_DIR=$(getSourceDirOfScript)

CURRENT_VERSION=$(cat ${SCRIPT_DIR}/../version.txt)
LAST_VERSION=$(curl -s -H 'Cache-Control: no-cache, no-store' -m 3 https://raw.githubusercontent.com/npuchko/helper-scripts/master/version.txt)

if [ "$CURRENT_VERSION" != "$LAST_VERSION" ]
  then
    echo ""
    echo ""
    echo -e "Version of checker \033[31m$CURRENT_VERSION\033[0m"
    echo -e "Latest version is \033[32m$LAST_VERSION\033[0m"
    echo -e "\033[31m============================================================================================"
    echo -e "|  The new version available! Please update https://github.com/npuchko/helper-scripts      |"
    echo -e "|  Just run \033[32mcd $SCRIPT_DIR && git fetch && git pull\033[0m          \033[31m|"
    echo -e "============================================================================================\033[0m"
    echo ""
    echo ""
  else
    echo -e "Version of checker \033[32m$CURRENT_VERSION\033[0m"
fi;

if [ -z "$1" ]
then
  read -p 'Enter JIRA ticket number (empty for using current folder): ' PROJECT_NAME
else
  PROJECT_NAME=$1
  echo "Project name is: ${PROJECT_NAME}"
fi

if [ -z "$2" ]
then
  read -p 'Enter cloud project ID: ' CLOUD_PROJECT_ID
else
  CLOUD_PROJECT_ID=$2
  echo "Cloud project ID  is: ${CLOUD_PROJECT_ID}"
fi

if [ -n "$CLOUD_PROJECT_ID" ]
then
  if [ -z "$3" ]
  then
    magento-cloud env:list -p ${CLOUD_PROJECT_ID} -I --format plain --pipe
    read -p 'Enter environment ID: ' CLOUD_ENV_ID
  else
    CLOUD_ENV_ID=$3
    echo "Cloud environment ID  is: ${CLOUD_ENV_ID}"
  fi
fi

PROJECT_NAME="${PROJECT_NAME//-/}"
PROJECT_NAME=$(echo "$PROJECT_NAME" |  tr '[:upper:]' '[:lower:]' )

if [ -z "${PROJECT_NAME}" ]
then
  PROJECT_NAME=$(basename "$(pwd)")
else
  mkdir ${PROJECT_NAME}
  cd $_
fi

echo "Project name is ${PROJECT_NAME}"

DATABASE_CONNECTION_DATA=""
SSH_HOST=""
if [ -z "$CLOUD_PROJECT_ID" ]
then
      echo "project id not specified. Try to find php*.code.tar.gz in this dir"
      PHP_VERSION="$(ls  php*.code.tar.gz 2>/dev/null | sort -V | tail -n1)"

else
      SSH_HOST=`eval magento-cloud environment:ssh --all --project $CLOUD_PROJECT_ID -e $CLOUD_ENV_ID --pipe`
      SSH_HOST=$(echo "$SSH_HOST" | head -1)
      echo "SSH Host is: ${SSH_HOST}"


      PHP_VERSION=$(magento-cloud app:list -p $CLOUD_PROJECT_ID -e $CLOUD_ENV_ID --columns Type --format plain --no-header)
      echo "Detected php version is ${PHP_VERSION}"

      DATABASE_CONNECTION_DATA=$(magento-cloud environment:relationships  -p $CLOUD_PROJECT_ID -e $CLOUD_ENV_ID --property database.0)
      echo "Database connection data ${DATABASE_CONNECTION_DATA}"

fi

if [ -z "$PHP_VERSION" ]; then
  while true; do
    read -p "PHP version not found. Please enter a valid version (${valid_versions[*]}) or press Enter to use 8.1: " input_version
    input_version="${input_version:-8.1}"
    if is_valid_version "$input_version"; then
      PHP_VERSION="$input_version"
      break
    else
      echo "Invalid version entered. Please enter one of the following: ${valid_versions[*]}."
    fi
  done
fi

echo "Using PHP version: $PHP_VERSION"

# output only after full result
echo "$(init_project ${PHP_VERSION})"

CODE_FILE="$(ls  php*.code.tar.gz code.tgz 2>/dev/null | sort -V | tail -n1)"
DATABASE_FILE="$(ls  php*.database.sql.gz database.sql.gz 2>/dev/null | sort -V | tail -n1)"

if [ -n "$CLOUD_PROJECT_ID" ]
then
  NEED_DUMPS=1
  if [ -f "$CODE_FILE" ] && [ -f "$DATABASE_FILE" ]; then
      read -p "Seems like dumps exist. Do you want to create them again? (y/n, default 'n'): " response
      response=${response:-n}
      if [[ "$response" != "y" ]]; then
        NEED_DUMPS=0
        echo "Creating dumps skipped."
      fi
  fi

  if [ "${NEED_DUMPS:-1}" -eq 1 ]; then
    echo "Creating dumps..."
    cloud-teleport ${SSH_HOST} dump
    echo "Dumps created successfully!"
    CODE_FILE="$(ls  php*.code.tar.gz code.tgz 2>/dev/null | sort -V | tail -n1)"
    DATABASE_FILE="$(ls  php*.database.sql.gz database.sql.gz 2>/dev/null | sort -V | tail -n1)"
  fi
fi

wait
#spin $pid "Waiting..."

CODE_INIT=
unpack_code () {
  if [ -n "${CODE_FILE}" ]
  then
    if [ -f "./source/composer.json" ] && [ -f "./source/bin/magento" ]  && [ -f "./source/app/etc/env.php.autobackup" ]; then
      CODE_INIT=1
      read -p "Seems like code is already unpacked. Do you want to unpack again? (y/n, default 'n'): " response
      response=${response:-n}
      if [[ "$response" != "y" ]]; then
        echo "Code unpacking skipped."
        exit 0
      fi
    fi

    if command -v pv &> /dev/null; then
      pv -p --name "Unpacking code..." $CODE_FILE | tar -xzf - -C ./source
    else
      tar -xzf $CODE_FILE -C ./source
    fi
  fi
}

# output only after full result
echo  "$(unpack_code)" &

# mutagen sync can not be on time so we need fully unpack before up env
# TODO
wait

cd source
(warden env up > /dev/null 2>&1) & pid=$!
spin $pid "Init environment..."

DB_IMPORT=
if [ -n "${DATABASE_FILE}" ]
then
#  echo "[" $(date -u) "Importing db dump..."
#  echo -e "\033[31m"
# @TODO check if deployed
  read -p "Do you want to re-import database dump? (y/n, default 'n'): " response
  response=${response:-n}
  if [[ "$response" != "y" ]]; then
    echo "Code unpacking skipped."
  else
    DB_IMPORT=1
    sed_commands="sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' \
      -e 's/TRIGGER[ ][\`][A-Za-z0-9_]*[\`][.]/TRIGGER /' \
      -e 's/utf8mb4_0900_ai_ci/utf8_general_ci/' \
      -e 's/utf8mb4_unicode_ci/utf8_general_ci/' \
      -e 's/utf8mb4_unicode_520_ci/utf8_general_ci/' \
      -e 's/CHARSET=utf8mb4/CHARSET=utf8/g' \
      -e 's/AFTER[ ]\(INSERT\)\{0,1\}\(UPDATE\)\{0,1\}\(DELETE\)\{0,1\}[ ]ON[ ][\`][A-Za-z0-9_]*[\`][.]/AFTER \1\2\3 ON /' \
      | grep -v 'mysqldump: Couldn.t find table' | grep -v 'mysqldump: Couldn.t execute' | grep -v 'Warning: Using a password' \
      | grep -v 'mysqldump: ' | grep -v 'ALTER DATABASE' \
      | warden db import"

    if command -v pv &> /dev/null; then
      pv -p --name "Importing database dump..." ../${DATABASE_FILE} | gunzip -cf | eval $sed_commands
    else
      gunzip -cf ../${DATABASE_FILE} | eval $sed_commands
    fi
  fi
#  echo -e "\033[0m"
#  echo "[" $(date -u) "Import of db dump finished"
fi

wait

#    if [ -f "source/composer.json" ] || [ -f "source/bin/magento" ]  || [ -f "source/app/etc/env.php.merchant" ]; then
#      read -p "Seems like code is already unpacked. Do you want to unpack again? (y/n, default 'n'): " response
#      response=${response:-n}
#      if [[ "$response" != "y" ]]; then
#        echo "Code unpacking skipped."
#        exit 0
#      fi
#    fi
# Replacing env.php and db configs

if [ "${CODE_INIT:-0}" -eq 1 ] || [ "${DB_IMPORT:-0}" -eq 1 ]; then
  warden env exec -T php-fpm chmod -R +x ./warden_deploy_scripts/* >> install.${START_TIME_OF_EXECUTION}.log 2>&1

  (warden env exec -T php-fpm /bin/sh ./warden_deploy_scripts/composer-deploy.sh >> install.${START_TIME_OF_EXECUTION}.log 2>&1) & pid=$!
  spin $pid "Composer deploy..."

  (warden env exec -T php-fpm php ./warden_deploy_scripts/replace-scripts.php env >> install.${START_TIME_OF_EXECUTION}.log 2>&1) & pid=$!
  spin $pid "Replacing environment scripts..."

  (warden env exec -T php-fpm php ./warden_deploy_scripts/replace-scripts.php conf >> install.${START_TIME_OF_EXECUTION}.log 2>&1) & pid=$!
  spin $pid "Replacing configuration scripts..."

  REPLACE_SCRIPTS_COMMAND=$(warden env exec -T php-fpm php ./warden_deploy_scripts/replace-scripts.php db)
  echo "${REPLACE_SCRIPTS_COMMAND}" && echo "${REPLACE_SCRIPTS_COMMAND}" >>  install.${START_TIME_OF_EXECUTION}.log 2>&1

  HOSTS_COMMAND=$(echo "${REPLACE_SCRIPTS_COMMAND}" | grep HOSTS_COMMAND | sed -u "s/HOSTS_COMMAND=//g")

  warden env exec -T php-fpm /bin/sh ./warden_deploy_scripts/magento-deploy.sh >> install.${START_TIME_OF_EXECUTION}.log 2>&1

  eval $HOSTS_COMMAND
fi

END_TIME_OF_EXECUTION=`date +%s`
TOTAL_TIME_OF_EXECUTION=$((END_TIME_OF_EXECUTION-START_TIME_OF_EXECUTION))
echo TOTAL time of execution is: $(convertsecs TOTAL_TIME_OF_EXECUTION)
echo "https://app.${PROJECT_NAME}.test/"
echo "https://app.${PROJECT_NAME}.test/admin/"
echo "Login: admin, password: 123123q"
echo "Install log: $(pwd)/install.${START_TIME_OF_EXECUTION}.log"
echo "Source path: $(pwd)"
